local map = vim.keymap.set
local on_attach = function(client, bufnr)
  map("n", "K", function()
    vim.lsp.buf.hover()
  end, { desc = "Hover symbol details", buffer = bufnr })
  map("n", "\\a", function()
    vim.lsp.buf.code_action()
  end, { desc = "LSP code action", buffer = bufnr })
  map("n", "\\i", function()
    vim.notify("Organize imports", "info", { title = "LSP" })
    vim.lsp.buf.code_action({
      filter = function(code_action) return code_action['kind'] == "source.organizeImports" end,
      apply = true,
    })
  end, { desc = "Organize imports", buffer = bufnr })
  map("n", "\\f", function()
    vim.notify("Format code", "info", { title = "LSP" })
    vim.lsp.buf.format()
  end, { desc = "Format code", buffer = bufnr })
  map("x", "\\f", function()
    vim.cmd("visual!")
    vim.lsp.buf.range_formatting()
  end, { desc = "Format selected code", buffer = bufnr })
  map("n", "\\h", function()
    vim.lsp.buf.signature_help()
  end, { desc = "Signature help", buffer = bufnr })
  map("n", "\\rn", function()
    vim.lsp.buf.rename()
  end, { desc = "Rename current symbol", buffer = bufnr })
  map("n", "gD", function()
    vim.lsp.buf.declaration()
  end, { desc = "Declaration of current symbol", buffer = bufnr })
  map("n", "gI", function()
    vim.lsp.buf.implementation()
  end, { desc = "Implementation of current symbol", buffer = bufnr })
  -- map("n", "gd", function()
  --   vim.lsp.buf.definition()
  -- end, { desc = "Show the definition of current symbol", buffer = bufnr })
  -- map("n", "gr", function()
  --   vim.lsp.buf.references()
  -- end, { desc = "References of current symbol", buffer = bufnr })
  -- map("n", "\\d", function()
  --   vim.diagnostic.open_float()
  -- end, { desc = "Hover diagnostics", buffer = bufnr })

  map("n", "[d", function()
    vim.diagnostic.goto_prev()
  end, { desc = "Previous diagnostic", buffer = bufnr })
  map("n", "]d", function()
    vim.diagnostic.goto_next()
  end, { desc = "Next diagnostic", buffer = bufnr })
  map("n", "gl", function()
    vim.diagnostic.open_float()
  end, { desc = "Hover diagnostics", buffer = bufnr })
  vim.api.nvim_buf_create_user_command(bufnr, "Format", function()
    vim.lsp.buf.formatting()
  end, { desc = "Format file with LSP" })
end
return on_attach
